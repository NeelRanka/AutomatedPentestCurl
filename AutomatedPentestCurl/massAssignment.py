import uncurl,urllib
import utility
from urllib.parse import unquote, urlencode
import os
import json

allowed = { "'" : 1, '"' : 1, "\\" : 1}
def escapeSpChars(string):
	temp=""
	for char in range(0,len(string)):
		if string[char] in allowed:
			temp+='\\'
		temp+=string[char]
	return(temp)


def fetchValuesFromFile(fileName):
	file = open(fileName)
	payloads = file.read().split("\n###\n")
	file.close()
	return(payloads)


def addToQuery(url, params):
	url_parts = list(urllib.parse.urlparse(url))
	addedQuery = utility.escapeSpChars( unquote( urlencode( list(params.items()) ) ) )
	if url_parts[4] == "": 
		url_parts[4] = addedQuery
	else:
		url_parts[4] += "&" + addedQuery
	return(urllib.parse.urlunparse(url_parts))


def addToJSONbody(body,params):
	JSONString = body.encode().decode("unicode-escape")
	jsData = json.loads(JSONString)
	for key in params.keys():
		jsData[key] = params[key]
	newJsonString = json.dumps(jsData)
	newJsonString = escapeSpChars(newJsonString)
	return(newJsonString)



def addToBody(body, params, JSON):
	if JSON:
		return addToJSONbody(body,params)
	addedData = utility.escapeSpChars( unquote( urlencode( list(params.items()) ) ) )
	if len(body) == 0:
		return(addedData)
	return( body + "&" + addedData )


def isTypeJSON(str):
	if len(str) > 2:
		if str[1] == "{" and str[-1] == "}":
			return(True)
	return(False)


def MassAssignment(file_name ,out_filename, attackID, keyFile, valueFile):
	
	def makeRequest(payloadedCurl):
		opFile = open("./tempCurls/curls_"+ uniqueCode +".sh","w")
		opFile.write(payloadedCurl)
		opFile.close()
		
		op = os.popen("bash ./tempCurls/curls_"+ uniqueCode +".sh > ./Results/"+str(out_filename)+".txt").read()


	def makeAndAddJSON(payloadedCurl,payload):
		try:
			file = open("./Results/"+str(out_filename)+".txt")
			opFile = open("./Results/"+str(out_filename)+".json","a")
			json.dump({
				"request":payloadedCurl,
				"payload":payload,
				"response":file.read()
				},opFile)
			opFile.write(",")
			
			file.close()
			opFile.close()
		except Exception as error:
			print("An error occured while adding data to JSON : ",error)


	def handleGET():
		start,end = utility.searchLocation(x.url[1:], cmd)
		if start == end == -1:
			makeRequest(cmd)
			return
		pre = list(cmd[:start])
		post = list(cmd[end:])
		for key in keys:
			if key != "":
				for value in values:
					newURL = addToQuery(x.url[1:], {key:value})
					payloadedCurl = "".join(pre + list(newURL) + post ) 
					
					payloadedCurl = utility.escapeOSCI(payloadedCurl)
					makeRequest(payloadedCurl)
					makeAndAddJSON(payloadedCurl, str(key+"="+value))


	def handlePOST():
		JSON = False
		start,end = utility.searchLocation(x.data[1:], cmd)
		if start == end == -1:
			makeRequest(cmd)
			return
		if isTypeJSON(x.data):
			JSON = True

		pre = list(cmd[:end])
		post = list(cmd[end:])
		for key in keys:
			if key!="":
				for value in values:
					newData = addToBody(x.data[1:], {key:value}, JSON)
					payloadedCurl = "".join(pre + list(newData) + post )

					payloadedCurl = utility.escapeOSCI(payloadedCurl)
					makeRequest( payloadedCurl )
					makeAndAddJSON(payloadedCurl, str(key+"="+value))


	keys = fetchValuesFromFile(keyFile)
	values = fetchValuesFromFile(valueFile)
	uniqueCode = attackID.split("-")[0]

	file = open(file_name)
	cmd=""

	for line in file:
		if "###" in line:
			if cmd !="":
				if "curl" in cmd :
					try:
						try:
							x = uncurl.parse_context(cmd)
						except Exception as e:
							print("Couldn't parse Curl File due to exception => ",e)
							cmd=""
							continue

						# x.auth     x.cookies  x.count(   x.data     x.headers  x.index(   x.method   x.url      x.verify
						if len(x.method) >= 1:
							if x.method[1:] == "get":
								handleGET()
							elif x.method[1:] == "post":
								handlePOST()

					except Exception as e:
						print("\n[*] Error occured :: ",e,"\n=>\n")		
			cmd = ""
		else:
			# print("line : ",line.strip("\\\n"))
			cmd+=line.strip("\\\n")

	file.close()
	utility.removeTempFile("./tempCurls/curls_"+ uniqueCode +".sh")
	OKFlag = utility.changeStatus(attackID,utility.completed)
	if not OKFlag:
		return("The process has been completed but status code might have an error")
	print("\n\n[+] Attack Completed and File saved "+out_filename)
