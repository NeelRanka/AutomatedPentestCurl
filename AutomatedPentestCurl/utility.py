from flask import make_response,jsonify
import os
import datetime
import uuid
import uncurl
import json

allowed = {
			'0': 1, '1': 1, '2': 1, '3': 1, '4': 1, '5': 1, '6': 1, '7': 1, '8': 1, '9': 1,
			'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1,
			'k': 1, 'l': 1, 'm': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1, 's': 1, 't': 1,
			'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1, 'A': 1, 'B': 1, 'C': 1, 'D': 1,
			'E': 1, 'F': 1, 'G': 1, 'H': 1, 'I': 1, 'J': 1, 'K': 1, 'L': 1, 'M': 1, 'N': 1,
			'O': 1, 'P': 1, 'Q': 1, 'R': 1, 'S': 1, 'T': 1, 'U': 1, 'V': 1, 'W': 1, 'X': 1,
			'Y': 1, 'Z': 1, '!': 1, '@': 1, '#': 1, '$': 1, '%': 1, '^': 1, '*': 1, '-': 1,
			'_': 1, '=': 1, '+': 1, ':': 1, ';': 1, ',': 1, '.': 1, '/': 1, '?': 1, '~': 1,
			" ": 1
			}

OSallowed = {
			'0': 1, '1': 1, '2': 1, '3': 1, '4': 1, '5': 1, '6': 1, '7': 1, '8': 1, '9': 1,
			'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1,
			'k': 1, 'l': 1, 'm': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1, 's': 1, 't': 1,
			'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1, 'A': 1, 'B': 1, 'C': 1, 'D': 1,
			'E': 1, 'F': 1, 'G': 1, 'H': 1, 'I': 1, 'J': 1, 'K': 1, 'L': 1, 'M': 1, 'N': 1,
			'O': 1, 'P': 1, 'Q': 1, 'R': 1, 'S': 1, 'T': 1, 'U': 1, 'V': 1, 'W': 1, 'X': 1,
			'Y': 1, 'Z': 1, '$': 1, '-': 1, ' ': 1
			}


AttackIDs = {}

def makeUniqueFileName(filename, uniqueCode=str(uuid.uuid4())):
	filename = os.path.splitext(filename)
	# print("FILE : ",filename)
	exts=[]
	while filename[1] != "":
		exts.append(filename[1])
		filename = os.path.splitext(filename[0])
	filename = filename[0]
	exts.reverse()

	filename = filename + uniqueCode
	return(filename+"".join(exts))


def isValidExt(filename):
	if filename == "" or "." not in filename:
		return(False)

	if len(filename.split(".")) > 2:
		return(False)
	name,extension = filename.split(".")  #Also check for mimeType
	if name == "":
		return(False)
	if extension not in ["txt"]:
		return(False)
	return(True)


pending = 300
completed = 200
def reserveID():
	token = str(uuid.uuid4())
	while token in AttackIDs:  #to avoid repetitions (very small case but still..)
		token = str(uuid.uuid4())
	return (token)


def linkID(attackID,filename):
	global AttackIDs
	AttackIDs[attackID] = [pending,filename]


def changeStatus(attackID,code):
	if attackID in AttackIDs:
		AttackIDs[attackID][0] = code
		return(1)
	else:
		return(0)

# complete this function
def isTooLarge(filename):
	print("in isTooLarge")
	return(False)


# complete this function
def isInvalidAttackID(attackID):
	if type(attackID) != str:
		return(True)
	return(False)


def returnResponse(code, msg, data, attackFlag=0, toBeDeleted=[]):
	# remove only if no attack is using the curl file
	if attackFlag==0: 
		for fileLoc in toBeDeleted:
			removeTempFile(fileLoc)

	if len(data)!=0:
		return( make_response( jsonify({ "code": code, "msg": msg, "data": data }), code ) )
	return( make_response( jsonify({ "code": code, "msg": msg }), code ) )	


def removeTempFile(fileLoc):
	if not os.path.isfile(fileLoc):
		print("File not found")
		return()
	os.remove(fileLoc)
	print("Deleted the Temp file : ",fileLoc)
	return(True)


def searchLocation(subString, string):
	location = string.find(subString)
	if location != -1 :
		return(location, location+len(subString))
	else:
		return(-1,-1)


def escapeSpChars(string):
	temp=""
	for char in range(0,len(string)):
		if string[char] not in allowed:
			temp+='\\'
		temp+=string[char]
	return(temp)


def escapeOSCI(cmd):
	string = cmd.encode().decode("unicode-escape")
	# print(string)
	string = list(string)
	index=0
	length = len(string)
	lastStart = None

	while index < length:
		if string[index] == "'":
			index+=1
			lastStart = index
			while index < length:
				if string[index] == "'": break
				index+=1
			if(index == length):
				index = lastStart
				string.insert(index-1,"\\")
				length+=1
			index+=1
			continue
		if string[index] == '"':
			index+=1
			lastStart = index
			while index < length:
				if string[index] == '"': break
				index+=1
			if(index == length):
				index = lastStart
				string.insert(index-1,"\\")
				length+=1
			index+=1
			continue
		if string[index] not in OSallowed:
			string.insert(index,"\\")
			index+=1
			length += 1
		index+=1

	string = "".join(string)
	# print(string)
	return(string)

def makeReq(payloadedCurl,uniqueCode,out_filename):
	payloadedCurl = escapeOSCI(payloadedCurl)
	opFile = open("./tempCurls/curls_"+ uniqueCode +".sh","w")
	opFile.write(payloadedCurl)
	opFile.close()
	op = os.popen("bash ./tempCurls/curls_"+ uniqueCode +".sh > ./Results/"+str(out_filename)+".txt").read()


def makeAndAddJSON(payloadedCurl,out_filename,payload):
	try:
		filee = open("./Results/"+str(out_filename)+".txt")
		opFile = open("./Results/"+str(out_filename)+".json","a")
		json.dump({
			"request":payloadedCurl,
			"payload":payload,
			"response":filee.read()
			},opFile)
		opFile.write(",")
		filee.close()
		opFile.close()

	except Exception as error:
		print("An error occured while adding data to JSON : ",error)