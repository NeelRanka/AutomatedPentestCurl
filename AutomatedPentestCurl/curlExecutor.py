import os
import uncurl
import urllib.parse
import utility
import json

allowed = {
			'0': 1, '1': 1, '2': 1, '3': 1, '4': 1, '5': 1, '6': 1, '7': 1, '8': 1, '9': 1,
			'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1,
			'k': 1, 'l': 1, 'm': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1, 's': 1, 't': 1,
			'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1, 'z': 1, 'A': 1, 'B': 1, 'C': 1, 'D': 1,
			'E': 1, 'F': 1, 'G': 1, 'H': 1, 'I': 1, 'J': 1, 'K': 1, 'L': 1, 'M': 1, 'N': 1,
			'O': 1, 'P': 1, 'Q': 1, 'R': 1, 'S': 1, 'T': 1, 'U': 1, 'V': 1, 'W': 1, 'X': 1,
			'Y': 1, 'Z': 1, '!': 1, '@': 1, '#': 1, '$': 1, '%': 1, '^': 1, '*': 1, '-': 1,
			'_': 1, '=': 1, '+': 1, ':': 1, ';': 1, ',': 1, '.': 1, '/': 1, '?': 1, '~': 1
			}

payloads = ["<script>alert(+);</script>", "<script>alert(1);</script>'"]


def insertPayload(cmd,payload,SEsets):
	oriCMD = cmd
	payload = escapeSpChars(payload)
	try:
		for start,end in SEsets:
			cmd = cmd[:start] + payload + cmd[end+1:]
	except Exception as error:
		print("some error occured in adding the payload",error)
		return(oriCMD)
	return(cmd)


def URLencode(string):
	try:
		return( urllib.parse.quote(strinig) ) 
	except Exception as e:
		print("Error occured while encoding the payload")
		return(string)


def getPayloadPosition(string):
	start=-1
	end=-1
	flag=0
	pos=[]
	index=0
	while index < len(string)-1:
		if string[index] == "$":
			if string[index+1] == "$":
				if flag==0:
					start = index
					flag=1
					index+=1
				elif flag==1:
					end = index+1
					flag=0
					pos.append([start,end])
					start=-1
					end=-1
		index+=1
	return(pos)


def readResults(out_filename):
	try:
		file = open("./Results/"+str(out_filename)+".txt")
		for line in file:
			print(line)
		file.close()
	except Exception as e:
		print("Error in reading file : ",e)


def escapeSpChars(string):
	temp=""
	for char in range(0,len(string)):
		if string[char] not in allowed:
			temp+='\\'
		temp+=string[char]
	return(temp)


def driver_code(file_name ,out_filename, uniqueCode):
	file = open(file_name)
	cmd=""

	for line in file:
		# print("#"*100)
		if "###" in line:
			if cmd !="":
				if "curl" in cmd :#and utility.isValidCurl(cmd) :
					try:
						payloadedCurl = utility.escapeOSCI(cmd)
						utility.makeReq(payloadedCurl,uniqueCode,out_filename)
						utility.makeAndAddJSON(payloadedCurl,out_filename,"Original Request")

						positions = getPayloadPosition(cmd)
						for payload in payloads:
							if payload == "" : continue
							payloadedCurl = insertPayload(cmd,payload,positions)
							print(payloadedCurl)
							
							payloadedCurl = utility.escapeOSCI(payloadedCurl)
							utility.makeReq(payloadedCurl,uniqueCode,out_filename)
							utility.makeAndAddJSON(payloadedCurl,out_filename,payload)

					except Exception as e:
						print("\n[*] Error occured :: ",e,"\n=>",payloadedCurl,"\n\n")		
			cmd = ""
		else:
			# print("line : ",line.strip("\\\n"))
			cmd+=line.strip("\\\n")

	file.close()


def Attack(file_name, out_filename, payloadFile, attackID):
	global payloads
	if not os.path.isfile(file_name):
		print("File not found")
		return()

	if payloadFile == None or not os.path.isfile(payloadFile):
		return()

	# ******** check for payload File size and how much can the payload list actually hold
	payloads = []
	file = open(payloadFile)
	# for line in file:
	# 	payloads.append(line.strip("\n"))
	payloads = file.read().split("\n###\n")
	file.close()

	if not utility.isValidExt(file_name):
		print("invalid filename!")
		return()
		
	f_size=os.path.getsize(file_name)
	if f_size!=0:
		uniqueCode = attackID.split("-")[0] #only get the first part of the uuid => 8 hex chars 32bytes
		driver_code(file_name , out_filename, uniqueCode)
		utility.removeTempFile("./tempCurls/curls_"+ uniqueCode +".sh")
		OKFlag = utility.changeStatus(attackID,utility.completed)
		if not OKFlag:
			return("The process has been completed but status code might have an error")
	print("\n\n[+] Attack Completed and File saved "+out_filename)
















"""
1. Input validatiosn of payload and curl file (should strictly be txt and no other format)
2. File handling whhile getting server response (directly store in txt file)
3. JSON data written will need to be parsed before actually using it as it is not exactly JSON standard (just a collections of JSON dat
	not and array of JSON data thus not supported)
4.

"""
