server = "http://localhost:5000"
tableObj = ""
xhrReq = ""
TAdict = {"curlFileTA":1}
stCode=300

const sleep = (delay) => new Promise((resolve) => setTimeout(resolve,delay))

console.log("resp imported")

/*async function liveUpdate(attackID) {
    await sleep(1000)
    const url = server+"/results/"+attackID
    
    var jsonFile = new XMLHttpRequest();
    jsonFile.open("GET",url,false);

    jsonFile.onreadystatechange = function() {
        // console.log("THe JSON file is ready")
        if (jsonFile.readyState == 4){

            if(jsonFile.status == 200) {
                    // console.log("THe JSON file is returned")
                    // console.log(jsonFile.responseText)
                    // obj = JSON.parse("[" + jsonFile.responseText.slice(0,-1) + "]" )
                    // console.log(obj)
                makeObjAvailable(obj)
                updateTable("resultTable",obj)
                    // break;
                this.stCode = 200
                console.log("finally done")
            }
            else if(jsonFile.status==300) {
                console.log("status code: 300")
                console.log("len of obj : " ,obj.length)
                makeObjAvailable(obj)
                updateTable("resultTable",obj)
            }
            else {
                console.log("status code: "+jsonFile.status)
                alert(jsonFile.responseText)
                // await sleep(1000)
            }
        }
    }
    console.log("before sending file ",attackID)
    jsonFile.send();
    console.log("new Obj: ")
    return("OK")
}*/

async function liveUpdate(attackID) {
    data = await fetch("http://localhost:5000/results/1ddb6e30-3c93-490c-a552-b2fd09b044e5").then((resp) => {return resp.text()})
    data.then( (a) => { this.jsonData = JSON.parse( "[" + a.slice(0,-1) + "]" ) } )
    console.log("is this okay.?")
    console.log(this.jsonData)
    await sleep(2000)
}



function fetchFileContents(attackID) {
	const url = server+"/results/"+attackID
	var jsonFile = new XMLHttpRequest();
    jsonFile.open("GET",url,true);

    jsonFile.onreadystatechange = function() {
    	// console.log("THe JSON file is ready")
        if (jsonFile.readyState == 4){
            
            if(jsonFile.status == 200) {
                console.log("THe JSON file is returned")
                // console.log(jsonFile.responseText)
                obj = JSON.parse("[" + jsonFile.responseText.slice(0,-1) + "]" )
                // console.log(obj)
                makeObjAvailable(obj)
                updateTable("resultTable",obj)
            }
            else if(jsonFile.status==300) {
                console.log("status code: 300")
                alert("The file is still being processed")
                // while (this.stCode!=200){
                     // liveUpdate(attackID)
                // }
                
            }
            else {
            	console.log("status code: "+jsonFile.status)
                alert(jsonFile.responseText)
            }
        }
    }
     console.log("before sending file ",attackID)
     jsonFile.send();
     console.log("new Obj: ")
     return("OK")
}

function makeObjAvailable(obj) {
	this.tableObj = obj;
    console.log("Object is now available")
}

function showFormData() {
    var elements = document.getElementById("formData").elements;
    var obj ={};
    for(var i = 0 ; i < elements.length ; i++){
        var item = elements.item(i);
        obj[item.name] = item.value;
    }
    console.log(JSON.stringify(obj));
    console.log(elements);
}


function addSearchFields(jsonKeys,tableId)
{
    var tableHTML = "<thead class='thead-light' style=''><tr>";
    for (var header in jsonKeys) {
        if(header == "response")
        {
            tableHTML+="<td>"
            tableHTML+= '<input type="search" class="form-control form-control-sm" id="statusCodeSearch" onkeyup="filterResultTable()" placeholder=" Search Status Code" aria-label="Search" aria-describedby="search-addon" id="attackIDChecker">'
            tableHTML+="</td>"    
        }
        tableHTML+="<td>"
        tableHTML+= '<input type="search" class="form-control form-control-sm" id="' + header + 'Search" onkeyup="filterResultTable()" placeholder="Search ' + header + '" aria-label="Search" aria-describedby="search-addon" id="attackIDChecker">'
        tableHTML+="</td>"
        console.log(header)
    }
    tableHTML += "</tr></thead>";
    // document.getElementById(tableId).innerHTML = tableHTML;
    return(tableHTML)
}


//check robustness of the HTML/XSS Injection remover by test cases
function updateTable(tableId, jsonData){
    console.log("updating table")

    //add searchFields
    searchHeader = addSearchFields(jsonData[0],tableId)
    var tableHTML = searchHeader
    tableHTML += "<thead class='thead-dark' style='background-color: dodgerblue;'><tr>";
    for (var headers in jsonData[0]) {
        if(headers == "response"){
            tableHTML += "<th style='width: 50%;'> Status Code </th>";
            tableHTML += "<th style='width: 50%;'>" + headers.replace(/</g, "&lt;").replace(/>/g, "&gt;"); + "</th>";    
        }
        else{
            tableHTML += "<th>" + headers.replace(/</g, "&lt;").replace(/>/g, "&gt;"); + "</th>";
        }
        console.log(headers)
    }
    tableHTML += "</tr></thead><tbody>";

    for (var eachItem in jsonData) {
        tableHTML += "<tr class='mh-400 scrollable' >"
        var dataObj = jsonData[eachItem];
        for (var eachValue in dataObj){
            if(eachValue == "response"){
                if(dataObj[eachValue] == "")
                {
                   dataObj[eachValue] = " "; 
                }
                tableHTML += "<td class='col-sm-3 scrollable' style='width: 25%; max-height:400px;' headers='" + eachValue + "' >" + dataObj[eachValue].split(" ")[1].replace(/</g, "&lt;").replace(/>/g, "&gt;"); + "</td>";
                tableHTML += "<td class='col scrollable' style='width: 50%; max-height:400px; overflow-y:scroll;' headers='response' ><pre>" + dataObj[eachValue].replace(/</g, "&lt;").replace(/>/g, "&gt;"); + "</pre></td>";
            }
            else{
                tableHTML += "<td class='col-sm-3 scrollable' style='width: 25%; max-height:400px;' headers='" + eachValue + "' ><div style=\"margin-left:auto; margin-right:auto; height: 350px; overflow-y: scroll;\">" + dataObj[eachValue].replace(/</g, "&lt;").replace(/>/g, "&gt;"); + "</div></td>";
            }
            // console.log(dataObj[eachValue])
        }
        tableHTML += "</tr>";
    }
    tableHTML += "</tbody>"
    
    console.log("unhiding resultDiv")
    document.getElementById(tableId).innerHTML = tableHTML;
    document.getElementById("resultDiv").classList.remove("d-none")
    paginate("resultTable")
}

function paginate(tableID){
    
    if(!$.fn.DataTable.isDataTable( '#'+tableID )) {
        $('#'+tableID).DataTable( {});
    }
    
    $(document).ready(function() {
                $("#requestSearch").on("keyup", filterResultTable() );
                $("#payloadSearch").on("keyup", filterResultTable() );
                $("#responseSearch").on("keyup", filterResultTable() );
            });
}

function filterResultTable(){
    table = $("#resultTable").DataTable()
    // table = $("#resultTable")
    reqSearch = $("#requestSearch").val()
    payloadSearch = $("#payloadSearch").val()
    respSearch = $("#responseSearch").val()
    statusCodeSearch = $("#statusCodeSearch").val()
    console.log(reqSearch)
    console.log(payloadSearch)
    console.log(respSearch)
    // reqSearch=""
    // payloadSearch=""
    // respSearch=""
    table.columns(0).search( reqSearch ).columns(1).search( payloadSearch ).columns(2).search( statusCodeSearch ).columns(3).search( respSearch ).draw()

}


function formatTAs(formID) {
    var elements = document.getElementById(formID).elements;
    var obj ={};
    for(var i = 0 ; i < elements.length ; i++){
        var item = elements.item(i);
        if(item.type == "textarea"){
            if( !this.TAdict[item.id] ){
                addDelim(item.id)
                console.log("Delim: ",item.id)
            }
        }
    }
    console.log(JSON.stringify(obj));
    console.log(elements);
}


function makeRequest(API) {
	document.getElementById("initScan").classList.add("disabled")
	var xhr = new XMLHttpRequest();

    //make the textAreas in the proper format depending on if already done
    formatTAs("formData")
	var form = document.querySelector('form');
    var formData = new FormData(form);
    xhr.open("POST", "http://localhost:5000/"+API, true);

    xhr.onreadystatechange = function() {
    if (xhr.readyState == XMLHttpRequest.DONE) {
        	console.log("Response : ",xhr.responseText);
        	console.log("status : ",xhr.status)
        	// makeXHRavailable(xhr)
            console.log(document.getElementById("initScan").classList)
            document.getElementById("initScan").classList.remove("disabled")
            resetElement("attackStatus")
            try {

                if(xhr.status==200) {
                    obj = JSON.parse("[" + xhr.responseText.slice(0,-1) + "]" )
                    // console.log(obj)
                    makeObjAvailable(obj)
                    updateTable("resultTable",obj)
                }
                else{
                    displayError(JSON.parse(xhr.responseText))
                }
                document.getElementById("resultDiv").classList.remove("d-none")
            }
            catch(err){
                console.log(err)
                alert("some error occured : check console tab for more details")
            }
    	}
	}
    console.log(formData)
    xhr.send(formData);
    console.log("request Made : ",xhr.responseText)
}


// function makeXHRavailable(xhr){
//     this.xhrReq = xhr;
// }

function resetElement(Eid) {
    document.getElementById(Eid).innerHTML = ""
}


function displayAttackID(object){
    // str = '<span class="badge bg-success" id="attackSuccess" hidden></span><br><br>'
    
    object["data"].forEach( function (arrayItem) {
        console.log(arrayItem)
        for(var eachItem in arrayItem) {
            console.log(eachItem,arrayItem[eachItem])
            // toBeAdded = '<br><span class="badge bg-success" id="' + arrayItem[eachItem] + '">' + eachItem + " : <a href='#' class='link-light' onclick='setAttackID(\"" + arrayItem[eachItem] + "\");>" + arrayItem[eachItem] +'</a></span><br><br>'
            toBeAdded = '<br><a href="#" onclick=\'setAttackID("' + arrayItem[eachItem] + '");\' ><span class="badge bg-success" id="' + arrayItem[eachItem] + '">' + eachItem + " : " + arrayItem[eachItem] +'</span></a><br><br>'
            document.getElementById("attackStatus").innerHTML += toBeAdded
        }
    })
    document.getElementById("attackStatus").hidden = false
}


function displayError(object) {
    toBeAdded = '<br><span class="badge bg-danger" id="attackError">'+ object["msg"] +'</span><br><br>'
    document.getElementById("attackStatus").innerHTML += toBeAdded

    if(object.data){
        displayAttackID(object)
    }

    document.getElementById("attackStatus").hidden = false    
}


function setAttackID(attackID) {
    document.getElementById("attackIDChecker").value = attackID
    console.log("setting attackID as ",attackID)
    checkAttackIDValidity()
}

function checkAttackIDValidity() {
    attackID = document.getElementById("attackIDChecker").value
    console.log(attackID)
    if(typeof(attackID) == "string") {
        console.log("fetching file")
        fetchFileContents(attackID)
    }
}

//to load the file contents in Text Area
function loadTAContents(IPid) {
    var fr = new FileReader()
    // document.getElementById(IPid+"TA").textContent = ""
    fr.onload = function() {
        document.getElementById(IPid+"TA").value = fr.result;
    }
    fr.readAsText( document.getElementById(IPid).files[0] )
    document.getElementById(IPid+"TADiv").hidden=false
}

function addDelim(TAid) {
    this.TAdict[TAid] = 1
    TA = document.getElementById(TAid)
    TA.value = TA.value.split("\n").join("\n###\n")
}