import utility
import json
import os
import uncurl
import urllib


alphanum = ['a', 'b', 'c', 'd', 'e', 'f', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
idorpaturl=["user","account","number","order","no",
            "doc","key","group","profile","edit",
            "report","data","Data","User","Account","Number",
            "Order","No","Doc","Key","Group","Profile",
            "Edit","Report","Data","session","Session"]


def modifyUrl(url_parts,params,key,value):
	params.append((key,value))
	querys = urllib.parse.unquote(urllib.parse.urlencode(params))
	url_parts[4] = querys
	newurl = urllib.parse.urlunparse(url_parts)
	params.pop()
	return newurl

def fetchValuesFromFile(fileName):
	file = open(fileName)
	# for line in file:
	# 	payloads.append(line.strip("\n"))
	payloads = file.read().split("\n###\n")
	file.close()
	return(payloads)


def keyval(url,cmd,uniqueCode,out_filename,IDORpayloads):
	emails = fetchValuesFromFile(IDORpayloads)
	start,end = searchLocation(url,cmd)
	url_parts = list(urllib.parse.urlparse(url))
	query = url_parts[4]
	params = urllib.parse.parse_qsl(query)
	tempUrl = url
	for key,value in params:
		if isTypeId(key) and value.isdigit():
			pre = cmd[:start]
			post = cmd[end:]
			#print("\n\n#######\n\nIs type ID : ",key,value)
			startv = int(value)
			endv = int(value)+10
			params.remove((key,value))
			for i in range (startv,endv):
				#print("=>",i,str(i))
				newurl = modifyUrl(url_parts,params,key,str(i))
				newCurl = pre + newurl + post
				utility.makeReq(newCurl,uniqueCode,out_filename)
				utility.makeAndAddJSON(newCurl,out_filename,str(i))

		elif isTypeOther(key):
			startValue,endValue = searchLocation(value,tempUrl)
			pre = cmd[:start]
			post = cmd[end:]
			startTemp = tempUrl[:startValue]
			endTemp = tempUrl[endValue:]
			#print("Is type other")
			if value[0].isalnum() and value[-1].isalnum():
				for i in alphanum:
				#Start
					valueS = i + value[1:]
					tempUrlS = startTemp + valueS + endTemp
					newCurlS = pre + tempUrlS + post
					utility.makeReq(newCurlS,uniqueCode,out_filename)
					utility.makeAndAddJSON(newCurlS,out_filename,valueS)
				#End
					valueE = value[:-1] + i
					tempUrlE = startTemp + valueE + endTemp
					newCurlE = pre + tempUrlE + post
					utility.makeReq(newCurlE,uniqueCode,out_filename)
					utility.makeAndAddJSON(newCurlE,out_filename,valueE)

					
		elif isTypeEmail(key):
			pre = cmd[:start]
			post = cmd[end:]
			params.remove((key,value))
			for mail in emails:
					#print(mail)
					if mail=="": continue
					newurl = modifyUrl(url_parts,params,key,mail)
					newCurl = pre + newurl + post
					utility.makeReq(newurl,uniqueCode,out_filename)
					utility.makeAndAddJSON(newCurl,out_filename,mail)
							
def isTypeId(key):
    if "id" in key or "Id" in key:
        return True
    return False
    			

def isTypeEmail(key):
	if "mail" in key or "Mail" in key:
			return True
	return False

def isTypeOther(key):
    for item in idorpaturl:
        if item in key:
            return True
    return False


def IDORcurlextract(file_name ,IDORAttackID, out_filename, IDORpayloads):	
	# print("starting curl extract",file_name,out_filename)
	file = open(file_name)
	cmd=""
	uniqueCode=IDORAttackID.split('-')[0]
	for line in file:
		if "###" in line:
			if cmd !="":
				if "curl" in cmd :
					try:
						x=uncurl.parse_context(cmd)
						idor(x.url,IDORAttackID,out_filename,cmd,IDORpayloads)
						print('\n\ncompleted command c\n\n', cmd)
						print("\nDone")			

					except Exception as e:
						print("\n[*] Error occured :: ",e,"\n=>",cmd,"\n\n")		

			cmd = ""
		
		else:
			cmd+=line.strip("\\\n")

	file.close()
	utility.removeTempFile("./tempCurls/curls_"+ uniqueCode +".sh")
	OKFlag = utility.changeStatus(IDORAttackID,utility.completed)
	if not OKFlag:
		return("The process has been completed but status code might have an error")
	print("\n\n[+] Attack Completed and File saved "+out_filename)


def idor(url,IDORAttackID,out_filename,curl,IDORpayloads):
	uniqueCode=IDORAttackID.split('-')[0]
	keyval(url,curl,uniqueCode,out_filename,IDORpayloads)
	print("===>>",url,"\n\n")
	print('returning from IDOR\n\n')

	
def searchLocation(subString, string):
	location = string.find(subString)
	if location != -1 :
		return(location, location+len(subString))
	else:
		return(-1,-1)
